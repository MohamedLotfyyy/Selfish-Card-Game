package selfish.deck;

import java.util.ArrayList;
import java.util.List;
import java.util.Collection;
import java.util.Collections;
import java.util.Random;

import selfish.GameException;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Serializable;

/**
Class of Deck of cards.
* @author Mohamed Lotfy
* @version 1
*/
public abstract class Deck implements Serializable {
    /**
     * collection of cards
     */
    private Collection<Card> cards;
    /**
     * serial version uid
     */
    private static final long serialVersionUID = 1L;
    
    /**
     * empyt Deck constructor.
     */
    protected Deck() {
        this.cards = new ArrayList<Card>();
    }
    /**
     * empyt Deck constructor.
     * @return something
     */
    public ArrayList<Card> getCards(){
        return (ArrayList<Card>) cards;
    }
    
    /**
     * Loads cards from a file.
     *
     * @param filename file name.
     * @return List containing the cards loaded from the filename file.
     * @throws GameException if
     */
    protected static List<Card> loadCards(String filename) throws GameException{
        List<Card> cards = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line = br.readLine();
            while ((line = br.readLine()) != null) {
                Card[] card = stringToCards(line);
                for (Card c : card) {
                    cards.add(c);
                }
            }
        } catch (FileNotFoundException e) {
            throw new GameException("file not found", e);
        }catch (IOException e) {
            System.err.format("io exception");
        }
        return cards;
    }
    
    /**
     * String to Card object.
     *
     * @param str The string input that represents a card.
     * @return the cards generated by the methods
     */
    protected static Card[] stringToCards(String str) {
        String[] split = str.split(";");
        String name = split[0].trim();
        String description = split[1].trim();
        int quantity = Integer.parseInt(split[2].trim());
        Card[] cards = new Card[quantity];
        for (int i = 0; i < quantity; i++) {
            cards[i] = new Card(name, description);
        }
        return cards;
    }
    
    /**
     * Adds card to the deck
     * @param card card that we want to add to the deck
     * @return size of the deck after we added the card
     */
    public int add(Card card){
        if(this.cards == null){
            this.cards = new ArrayList<>();
        }
        this.cards.add(card);
        return this.cards.size();
    }
    
    /**
     * Adds list of cards to the deck.
     *
     * @param cards The list that we want to add to the deck
     * @return size of deck after we added list of cards
     */
    protected int add(List<Card> cards){
        this.cards.addAll(cards);
        return this.cards.size();
    }
    
    /**
     * Remove card from the deck
     * @param card  card that we want to remove
     */
    public void remove(Card card){
        if (this.cards != null && this.cards.contains(card)) {
            cards.remove(card);
        }
    }
    
    /**
     * Shuffle the deck.
     * @param random  random
     */
    public void shuffle(Random random){
        List<Card> temp_list = new ArrayList<>(this.cards);
        Collections.shuffle(temp_list, random);
        cards.clear();
        cards.addAll(temp_list);
    }
    
    /**
     * return size of deck.
     * @return size of  deck.
     */
    public int size(){
        return this.cards.size();
    }
    
    /**
     * draw a card from the deck
     * @return card that we drawed
     */
    public Card draw(){
        if (cards.isEmpty()) {
            throw new IllegalStateException("hello");
        }
        Card element =  ((ArrayList<Card>) cards).get(cards.size() - 1);
        cards.remove(element);
        return element;
    }
}
